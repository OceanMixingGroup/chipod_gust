function [] = do_main_processing( basedir, pflag )
%% [] = do_main_processing( basedir, [pflag] ) 
%  
%     This function drives the main processing for a given GusT or Chipod.
%
%     INPUT
%        basedir     :  base directory of the given instrument
%        pflag       :  processing flag object generated by chi_processing_flags.m
%                       if pflag is not given it will be generated automatically based on 
%                       inputs in the base directory
%
%   created by: 
%        Johannes Becherer
%        Thu Dec 28 12:33:57 PST 2017

%_____________________get all raw files______________________

   [fids, fdate] = chi_find_rawfiles(basedir);


%____________________set automatic pflag______________________
   if nargin < 2

      pflag = chi_processing_flags;     % get list of processing flags

      %---------------------gust or chipod----------------------
      if fids{1}(end-3)=='g' | fids{1}(end-3)=='G' % GusT
         pflag = pflag.c_gst(1);
      else                % chipod
         pflag = pflag.c_gst(0);
      end

      %---------------set processing flags automatically----------
      pflag = pflag.auto_set(basedir);

       pflag = pflag.make_cons();   % make sub-flags consitent with master flags 

       pflag.master.use_compass = 1; % if 0, assume chipod vane moves it
                                     % into the flow perfectly

       pflag.master.use_pres = 0; % set to 0, accelerometers are
                                  % working, else differentiate
                                  % pressure to get speed past sensor
       pflag.master.parallel = 0;

      %---------------------get flag status----------------------
      pflag.status();

   end

%_____________________do main processing______________________

   if(pflag.master.parallel)
      parpool;
      % parallel for-loop
      parfor f=1:length(fids)
            disp(['processing day ' num2str(f) ' of ' num2str(length(fids))]);
         try % take care if script crashes that the parpoo is shut down
            chi_main_proc(basedir, fids{f}, pflag);
         catch
            disp(['!!!!!! ' fids{f} ' crashed while processing  !!!!!!' ]);
         end
      end
      % close parpool
      delete(gcp);
   else
      for f=1:length(fids)
         disp(['processing day ' num2str(f) ' of ' num2str(length(fids))]);
         chi_main_proc(basedir, fids{f}, pflag);
      end
   end

   %_____________________merge all days______________________
   disp('merge all days')
      %_loop through all processing flags for chi processing_
      for i = 1:length(pflag.id)
            [id, ~, ~, ~] = pflag.get_id(i);
            if pflag.proc.(id) % check if flag is active 
               disp([ id ' is being merged '  ]);
               ddir = ['chi' filesep 'chi_' id];
               % keep averaging window 0 here.
               % Only merge, average later in combine_turbulene.m
               chi_merge_and_avg(basedir, ddir, 0);
            end
      end

   %_____________merge eps data______________________
   if pflag.master.epsp
      disp('Pitot epsilon data are being merged')
      % keep averaging window 0 here.
      % Only merge, average later in combine_turbulene.m
      chi_merge_and_avg(basedir, 'eps', 0);
   end
